import allureimport pytestfrom utils.load_yaml import load_yamlfrom page.bike_settings_page import BikeSettingsPagefrom page.home_page import HomePagefrom page.info_page import InfoPagefrom utils.navigation_helper import run_navigation_test@allure.epic("velotric app应用")@allure.story("首页模块")class TestHome:    # 读取测试数据    data = load_yaml('./data/home.yaml')    # userinfo_data = data['userinfo_data']    # bike_settings_data = data['bike_settings_data']    PAGE_OBJECTS = {        'InfoPage': InfoPage,        'HomePage': HomePage,        'BikeSettingsPage': BikeSettingsPage    }    @pytest.mark.run(order=2)    @pytest.mark.parametrize("case", data, ids=[f"{case['case_name']}" for case in data])    def test_home(self, logged_in_driver, case):        allure.dynamic.title(case['case_name'])        # 获取 driver        driver = logged_in_driver        # 获取页面实例        ap = HomePage(driver)        test_type = case.get('test_type', 'navigation')  # 默认为 navigation        if test_type == 'navigation':            run_navigation_test(                driver=driver,                start_page_object=ap,                case_data=case,                page_object_map=self.PAGE_OBJECTS            )        else:            pytest.fail(f"不支持的测试类型：{test_type}")    #    # @pytest.mark.run(order=2)    # @pytest.mark.parametrize("case_data", userinfo_data,    #                          ids=[f"{case['case_name']}" for case in userinfo_data])    # def test_click_userinfo(self, logged_in_driver, case_data):    #     # 动态的标题    #     allure.dynamic.title(f"{case_data['case_name']}")    #    #     # 实例化 HomePage、InfoPage 对象    #     hp = HomePage(logged_in_driver)    #     ip = InfoPage(logged_in_driver)    #    #     # 在首页点击"个人信息"按钮    #     hp.click_userinfo()    #    #     # 断言是否成功进入个人信息页【判断进入到个人信息页面中是否有 "Settings" 文字】    #     actual_msg = hp.get_settings_text()    #     assert actual_msg == case_data[    #         "expected_result"], f"期望值: {case_data['expected_result']}, 实际值: {actual_msg}"    #    #     # 断言完成后，在个人信息页面点击返回按钮回到主页    #     ip.click_back_btn()    #    #     # 断言是否成功返回到首页【判断进入到首页页面中是否有 "START RIDING" 文字】    #     # actual_msg = hp.click_start_riding()    #     # assert actual_msg == case_data[    #     #     "expected_result"], f"期望值: {case_data['expected_result']}, 实际值: {actual_msg}"    #    # @pytest.mark.run(order=3)    # @pytest.mark.parametrize(    #     "case_data",    #     bike_settings_data,    #     ids=[f"{case['case_name']}" for case in bike_settings_data]    # )    # def test_click_bike_settings(self, logged_in_driver, case_data):    #     # 动态的标题    #     allure.dynamic.title(f"{case_data['case_name']}")    #    #     # 实例化 HomePage、BikeSettingsPage 对象    #     hp = HomePage(logged_in_driver)    #     bsp = BikeSettingsPage(logged_in_driver)    #    #     # 在首页点击"车辆设置"按钮    #     hp.click_bike_settings()    #    #     # 断言是否成功进入车辆设置页【判断进入到车辆设置页面中是否有 "BIKE SETTINGS" 文字】    #     actual_msg = hp.get_bike_settings_content_text()    #     assert actual_msg == case_data["expected_result"], \    #         f"期望值: {case_data['expected_result']}, 实际值: {actual_msg}"    #    #     # 断言完成后，在车辆设置页面点击返回按钮回到首页    #     bsp.click_back_btn()    #    #     # 断言是否成功返回到首页【判断进入到首页页面中是否有 "START RIDING" 文字】    #     # assert actual_msg == case_data[    #     #     "expected_result"], f"期望值: {case_data['expected_result']}, 实际值: {actual_msg}"