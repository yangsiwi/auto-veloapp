import allureimport pytestfrom utils.load_yaml import load_yamlfrom page.bike_settings_page import BikeSettingsPagefrom page.home_page import HomePagefrom page.info_page import InfoPagefrom utils.navigation_helper import run_navigation_test@allure.epic("velotric app应用")@allure.story("首页模块")class TestHome:    # 读取测试数据    data = load_yaml('./data/home.yaml')    PAGE_OBJECTS = {        'InfoPage': InfoPage,        'HomePage': HomePage,        'BikeSettingsPage': BikeSettingsPage    }    @pytest.mark.run(order=2)    @pytest.mark.parametrize("case", data, ids=[f"{case['case_name']}" for case in data])    def test_home(self, logged_in_driver, case):        allure.dynamic.title(case['case_name'])        # 获取 driver        driver = logged_in_driver        # 获取页面实例        ap = HomePage(driver)        test_type = case.get('test_type', 'navigation')  # 默认为 navigation        if test_type == 'navigation':            run_navigation_test(                driver=driver,                start_page_object=ap,                case_data=case,                page_object_map=self.PAGE_OBJECTS            )        elif test_type == 'connection_status':            TestHome._run_connection_test(ap, case)        else:            # 如果没有找到匹配的处理函数，则测试失败            pytest.fail(f"框架暂不支持此测试类型或未找到对应的处理函数：'{test_type}'")    # --- 专门处理 connection_status 测试类型的私有方法 ---    @staticmethod    def _run_connection_test(ap, case):        """        执行“连接状态检查”类型的测试逻辑。        """        allure.step(f"执行连接状态检查: {case['case_name']}")        # 1. 从用例数据中获取必要信息        verify_method_name = case['verify_method']        timeout = case['timeout']        expected_result = case['expected_result']        # 2. 从页面对象中动态获取并执行验证方法        verify_method = getattr(ap, verify_method_name)        actual_result = verify_method(timeout=timeout)        # 3. 在测试脚本中进行断言        allure.attach(f"断言：期望结果='{expected_result}', 实际结果='{actual_result}'", name="结果断言")        assert actual_result == expected_result, \            f"状态验证失败！期望结果: {expected_result}, 实际结果: {actual_result}"